import{createRequire as n}from"node:module";var o=n(import.meta.url),{autoUpdater:t}=o("electron-updater"),r=o("electron-log");function d(a){try{t.autoDownload=!1;try{t.logger=r,r.transports.file.level="info"}catch{}t.on("error",e=>{try{a()?.webContents.send("update:error",{message:String(e?.stack||e?.message||e)})}catch{}}),t.on("update-available",e=>{try{a()?.webContents.send("update:available",e)}catch{}}),t.on("update-not-available",e=>{try{a()?.webContents.send("update:not-available",e)}catch{}}),t.on("download-progress",e=>{try{a()?.webContents.send("update:download-progress",e)}catch{}}),t.on("update-downloaded",e=>{try{a()?.webContents.send("update:downloaded",e)}catch{}})}catch{}}function l(a){a.handle("update:check",async()=>{try{return{ok:!0,result:(await t.checkForUpdates())?.updateInfo||null}}catch(e){return{ok:!1,error:String(e?.message||e)}}}),a.handle("update:download",async()=>{try{return await t.downloadUpdate(),{ok:!0}}catch(e){return{ok:!1,error:String(e?.message||e)}}}),a.handle("update:quitAndInstall",async()=>{try{return setImmediate(()=>t.quitAndInstall(!1,!0)),{ok:!0}}catch(e){return{ok:!1,error:String(e?.message||e)}}})}export{d as setupAutoUpdater,l as setupUpdateIPC};
